import "pkg:/source/rooibos/BaseTestSuite.bs"

namespace tests

  @noEarlyExit
  @suite("Rooibos assertion tests")
  class AssertionTests extends rooibos.BaseTestSuite

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests basic assertions")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("Fail")
    function _()

      m.Fail("reason")

      isFail = m.currentResult.isFail
      m.currentResult.Reset()


      m.assertTrue(isFail)
    end function

    @it("FailCrash")
    function _()

      try
        result = 2 / 0
      catch e
        m.failCrash(e)
      end try

      isFail = m.currentResult.isFail
      isCrash = m.currentResult.isCrash
      m.currentResult.Reset()

      m.assertTrue(isCrash)
      m.assertTrue(isFail)
    end function

    @it("AssertTrue")
    @params(true, true)
    @params(false, false)
    @params(invalid, false)
    @params(0, false)
    @params(1, false)
    @params("test", false)
    function _(value, expectedAssertResult)

      m.assertTrue(value)
      isFail = m.currentResult.isFail
      m.currentResult.Reset()


      m.assertEqual(isFail, not expectedAssertResult)
    end function


    @it("AssertFalse")
    @params(false, true)
    @params(true, false)
    @params(invalid, false)
    @params(0, false)
    @params(1, false)
    @params("test", false)
    function _(value, expectedAssertResult)

      m.assertFalse(value)

      isFail = m.currentResult.isFail
      m.currentResult.Reset()


      m.assertEqual(isFail, not expectedAssertResult)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertArrayContainsAAs")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("Fail")
    @params([{ "one": 1 }], [{ "one": 2 }])
    @params([{ "one": 1 }], [{ "one": "a" }])
    @params([{ "one": 1 }], [{}])
    @params([{ "one": 1 }], [invalid])
    @params([{ "one": 1 }], [])
    @params([{ "one": 1 }], invalid)
    @params([{ "one": 1 }], [[]])
    @params([{ "one": 1 }], ["wrong"])
    @params([{ "one": 1 }], [2])
    @params([{ "one": "a" }], [{ "one": 1 }])
    @params([{ "two": 1 }], [{ "one": 1 }])
    @params([invalid], [{ "one": 1 }])
    @params(invalid, [{ "one": 1 }])
    @params([{ "one": 1, "two": 2 }], [{ "one": "1" }])
    @params([{ "one": 1 }, { "two": 2 }], [{ "one": "1" }, { "two": "a" }])
    @params([{ "one": 1 }, { "two": 2 }], [{ "a": 1 }, { "a": 1 }, { "a": 1 }])
    function _(expectedAAs, items)

      m.assertArrayContainsAAs(items, expectedAAs)

      isFail = m.currentResult.isFail
      m.currentResult.Reset()


      m.assertTrue(isFail)
    end function


    @it("pass")
    @params([], [])
    @params([{}], [{}])
    @params([{ "one": 1 }], [{ "one": 1 }])
    @params([{ "one": 1, "two": 2 }], [{ "one": 1, "two": 2 }])
    @params([{ "one": 1, "two": 2 }], [{ "two": 2, "one": 1 }])
    @params([{ "one": 1, "two": 2 }, { "one": 1 }], [{ "one": 1 }, { "two": 2, "one": 1 }])
    @params([{ "one": 1, "two": 2 }, { "one": 1 }, { "three": 3 }], [{ "one": 1 }, { "three": 3 }, { "two": 2, "one": 1 }])
    function _(expectedAAs, items)

      m.assertArrayContainsAAs(items, expectedAAs)

      isFail = m.currentResult.isFail

      m.currentResult.Reset()

      m.assertFalse(isFail)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests global is present on testSuite")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @beforeEach
    function test_assertGlobal_beforeEach()
      m.beforeEachGlobal = m.global
    end function

    @afterEach
    function test_assertGlobal_afterEach()
      m.afterEachGlobal = m.global
    end function

    @it("global is in test")
    function _()
      m.assertNotInvalid(m.global)
    end function

    @it("global is in before each and after each")
    function _()
      m.assertNotInvalid(m.global)
      m.assertNotInvalid(m.beforeEachGlobal)
      m.assertNotInvalid(m.afterEachGlobal)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertArrayContainsOnlyValuesOfType")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("pass")
    @params(["one", "two", "three"], "String")
    @params([1, 2, 3], "Integer")
    @params([true, true, false], "Boolean")
    @params([[true, true], [false, false]], "Array")
    @params([{ "test": 1 }, { "test": 1 }], "AssociativeArray")
    function _(values, typeName)

      m.assertArrayContainsOnlyValuesOfType(values, typeName)
      isFail = m.currentResult.isFail

      m.currentResult.Reset()

      m.assertFalse(isFail)

    end function

    @it("fail")
    @params(["one", 2, "three"], "String")
    @params([1, "two", 3], "Integer")
    @params([true, "true", false], "Boolean")
    @params([[true, true], false, false], "Array")
    @params([{ "test": 1 }, "notAA"], "AssociativeArray")
    @params(["one", "two", "three"], "UnknownType")
    @params(["one", "two", "three"], "Integer")
    @params([1, 2, 3], "String")
    @params([true, true, false], "String")
    @params([[true, true], [false, false]], "AssociativeArray")
    @params([{ "test": 1 }, { "test": 1 }], "Array")
    function _(values, typeName)

      m.assertArrayContainsOnlyValuesOfType(values, typeName)
      isFail = m.currentResult.isFail
      m.currentResult.Reset()


      m.assertTrue(isFail)


    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertNotEmpty")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("pass")
    @params(["one", "two", "three"])
    @params([1, 2, 3])
    @params([true])
    @params([[true, true], [false, false]])
    @params([{ "test": 1 }])
    @params("not empty")
    @params([invalid])
    function _(values)

      m.assertNotEmpty(values)
      isFail = m.currentResult.isFail

      m.currentResult.Reset()

      m.assertFalse(isFail)

    end function

    @it("fail")
    @params(invalid)
    @params([])
    @params({})
    @params(1)
    @params("")
    function _(values)

      m.assertNotEmpty(values)
      isFail = m.currentResult.isFail

      m.currentResult.Reset()

      m.assertTrue(isFail)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertEmpty")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("pass")
    @params([])
    @params({})
    @params("")
    function _(values)

      m.assertEmpty(values)
      isFail = m.currentResult.isFail

      m.currentResult.Reset()

      m.assertFalse(isFail)

    end function

    @it("fail")
    @params(1)
    @params(invalid)
    @params(["one", "two", "three"])
    @params([1, 2, 3])
    @params([true])
    @params([[true, true], [false, false]])
    @params([{ "test": 1 }])
    @params("not empty")
    @params([invalid])
    function _(values)

      m.assertEmpty(values)
      isFail = m.currentResult.isFail

      m.currentResult.Reset()

      m.assertTrue(isFail)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests expect")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("multi return values")
    function _()
      obj = {}
      m.expect(obj, "mockMethod", 5, invalid, { "multiResult": ["one", 2, invalid, "last"] }, true)

      result = obj.mockMethod()
      m.assertEqual(result, "one")

      result = obj.mockMethod()
      m.assertEqual(result, 2)

      result = obj.mockMethod()
      m.assertEqual(result, invalid)

      result = obj.mockMethod()
      m.assertEqual(result, "last")

      result = obj.mockMethod()
      m.assertEqual(result, "last")

      m.assertMocks()
      isFail = m.currentResult.isFail

      m.currentResult.Reset()
      m.assertFalse(isFail)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests expect with overloaded expectOnce")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("simple test")
    function _()
      obj = {}
      arg1 = "arg1"
      arg2 = "arg2"
      arg3 = "arg3"
      result1 = 1
      result2 = 2
      result3 = 3

      m.expectOnce(obj, "mockMethod", [arg1], result1, true)
      m.expectOnce(obj, "mockMethod", [arg2], result2, true)
      m.expectOnce(obj, "mockMethod", [arg3], result3, true)

      result = obj.mockMethod(arg1)
      m.assertEqual(result, result1)

      result = obj.mockMethod(arg2)
      m.assertEqual(result, result2)

      result = obj.mockMethod(arg3)
      m.assertEqual(result, result3)

      m.assertMocks()
      isFail = m.currentResult.isFail

      m.currentResult.Reset()
      m.assertFalse(isFail)
    end function


    @it("can set up multi expects on same method - one invocation with any args")
    function _()
      obj = {}
      arg1 = "arg1"
      arg2 = "arg2"
      arg3 = "arg3"
      result1 = 1
      result2 = 2
      result3 = 3

      m.expectOnce(obj, "mockMethod", [arg1], result1, true)
      m.expectOnce(obj, "mockMethod", invalid, result2, true)
      m.expectOnce(obj, "mockMethod", [arg3], result3, true)

      result = obj.mockMethod(arg1)
      m.assertEqual(result, result1)

      result = obj.mockMethod("do not care about args", "used in invocation", 2)
      m.assertEqual(result, result2)

      result = obj.mockMethod(arg3)
      m.assertEqual(result, result3)

      m.assertMocks()
      isFail = m.currentResult.isFail

      m.currentResult.Reset()
      m.assertFalse(isFail)

    end function

    @it("can set up multi expects on same method - multi params")
    function _()
      obj = {}
      arg1 = "arg1"
      arg2 = "arg2"
      arg3 = "arg3"
      result1 = 1
      result2 = 2
      result3 = 3

      m.expectOnce(obj, "mockMethod", [arg1, arg2, arg3], result1, true)
      m.expectOnce(obj, "mockMethod", [arg2, arg3, arg1], result2, true)
      m.expectOnce(obj, "mockMethod", [arg3, arg2, arg1], result3, true)

      result = obj.mockMethod(arg1, arg2, arg3)
      m.assertEqual(result, result1)

      result = obj.mockMethod(arg2, arg3, arg1)
      m.assertEqual(result, result2)

      result = obj.mockMethod(arg3, arg2, arg1)
      m.assertEqual(result, result3)

      m.assertMocks()
      isFail = m.currentResult.isFail

      m.currentResult.Reset()
      m.assertFalse(isFail)

    end function

    @it("multi test, multi params with other expects")
    function _()
      obj = {}
      arg1 = "arg1"
      arg2 = "arg2"
      arg3 = "arg3"
      result1 = 1
      result2 = 2
      result3 = 3

      m.expectOnce(obj, "anotherMockMethod", invalid, "another", true)
      m.expectOnce(obj, "anotherMockMethod2", [1, 2, 3], "another2", true)
      m.expectOnce(obj, "mockMethod", [arg1, arg2, arg3], result1, true)
      m.expectOnce(obj, "mockMethod", [arg2, arg3, arg1], result2, true)
      m.expectOnce(obj, "mockMethod", [arg3, arg2, arg1], result3, true)

      result = obj.anotherMockMethod()
      m.assertEqual(result, "another")

      result = obj.anotherMockMethod2(1, 2, 3)
      m.assertEqual(result, "another2")

      result = obj.mockMethod(arg1, arg2, arg3)
      m.assertEqual(result, result)

      result = obj.mockMethod(arg2, arg3, arg1)
      m.assertEqual(result, result2)

      result = obj.mockMethod(arg3, arg2, arg1)
      m.assertEqual(result, result3)

      m.assertMocks()
      isFail = m.currentResult.isFail

      m.currentResult.Reset()
      m.assertFalse(isFail)

    end function

    @it("multi test, multi params with other expects - fail others")
    function _()
      obj = {}
      arg1 = "arg1"
      arg2 = "arg2"
      arg3 = "arg3"
      result1 = 1
      result2 = 2
      result3 = 3

      m.expectOnce(obj, "anotherMockMethod", ["not passed"], "another", true)
      m.expectOnce(obj, "anotherMockMethod2", [1, 2, 3], "another2", true)
      m.expectOnce(obj, "mockMethod", [arg1, arg2, arg3], result1, true)
      m.expectOnce(obj, "mockMethod", [arg2, arg3, arg1], result2, true)
      m.expectOnce(obj, "mockMethod", [arg3, arg2, arg1], result3, true)

      result = obj.anotherMockMethod()
      m.assertEqual(result, "another")

      result = obj.anotherMockMethod2(1, 2, 3)
      m.assertEqual(result, "another2")

      result = obj.mockMethod(arg1, arg2, arg3)
      m.assertEqual(result, result)

      result = obj.mockMethod(arg2, arg3, arg1)
      m.assertEqual(result, result2)

      result = obj.mockMethod(arg3, arg2, arg1)
      m.assertEqual(result, result3)

      m.assertMocks()
      isFail = m.currentResult.isFail

      m.currentResult.Reset()
      m.assertTrue(isFail)

    end function

    @it("can set up multi expects on same method")
    @params("arg1", "arg2", "arg3")
    @params("arg1", "arg2", "arg3")
    @params("arg1", "arg2", "arg3")
    @params("arg1", "arg2", "arg3")
    @params("arg1", "arg2", "arg3")
    @params("arg1", invalid, "arg3")
    function _(call1, call2, call3)
      obj = {}
      arg1 = "arg1"
      arg2 = "arg2"
      arg3 = "arg3"
      result1 = 1
      result2 = 2
      result3 = 3

      m.expectOnce(obj, "mockMethod", [arg1], result1, true)
      m.expectOnce(obj, "mockMethod", [arg2], result2, true)
      m.expectOnce(obj, "mockMethod", [arg3], result3, true)

      result = obj.mockMethod(call1)
      m.assertEqual(result, result1)

      result = obj.mockMethod(call2)
      m.assertEqual(result, result2)

      result = obj.mockMethod(call2)
      m.assertEqual(result, result3)

      m.assertMocks()
      isFail = m.currentResult.isFail

      m.currentResult.Reset()
      m.assertTrue(isFail)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests overloaded expectOnce on different objects")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("success")
    function _()
      obj = {}
      obj2 = {}
      arg1 = "arg1"
      arg2 = "arg2"
      arg3 = "arg3"
      result1 = 1
      result2 = 2
      result3 = 3

      m.expectOnce(obj, "mockMethod", [arg1], result1, true)
      m.expectOnce(obj, "mockMethod", [arg2], result2, true)
      m.expectOnce(obj2, "mockMethod", [arg3], result3, true)

      result = obj.mockMethod(arg1)
      m.assertEqual(result, result1)

      result = obj.mockMethod(arg2)
      m.assertEqual(result, result2)

      result = obj2.mockMethod(arg3)
      m.assertEqual(result, result3)

      m.assertMocks()
      isFail = m.currentResult.isFail

      m.currentResult.Reset()
      m.assertFalse(isFail)

    end function

    @it("fail to match")
    function _()
      obj = {}
      obj2 = {}
      arg1 = "arg1"
      arg2 = "arg2"
      arg3 = "arg3"
      result1 = 1
      result2 = 2
      result3 = 3

      m.expectOnce(obj, "mockMethod", [arg1], result1, true)
      m.expectOnce(obj, "mockMethod", [arg2], result2, true)
      m.expectOnce(obj2, "mockMethod", [arg3], result3, true)

      result = obj.mockMethod(arg1)
      m.assertEqual(result, result1)

      result = obj.mockMethod(arg2)
      m.assertEqual(result, result2)

      result = obj2.mockMethod(arg3)
      m.assertEqual(result, result3)

      m.assertMocks()
      isFail = m.currentResult.isFail

      m.currentResult.Reset()
      m.assertFalse(isFail)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests fail on crash")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("reports error")
    function _()
      throw "some error"
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertTrue fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("AssertTrue with message")
    @params(false)
    @params(invalid)
    @params(0)
    @params(1)
    @params("test")
    @params({})
    @params([])
    function _(value)
      m.assertTrue(value)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertFalse fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("AssertFalse")
    @params(true)
    @params(invalid)
    @params(0)
    @params(1)
    @params("test")
    @params({})
    @params([])
    function _(value)
      m.assertFalse(value)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertEqual fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("assertEqual fail on object")
    function _()
      obj = {
        "mockMethod": function()
          return 1
        end function
        key: "value"
        object: {
          "otherKey": "value"
        }
        array: [1, 2, 3]
      }
      obj2 = {
        "mockMethod": invalid
        key: "value1"
        object: {
          "otherKey1": "value"
        }
        array: [1, 2, 4, 3]
      }
      m.assertEqual(obj, obj2)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertAAHasKeys fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertAAHasKeys")
    function _()
      obj = {
        one: 1
        two: 2
        three: 3
      }
      m.assertAAHasKeys(obj, ["one", "two", "three", "four", "five", "six'", "seven"""])
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertArrayContains fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail AssertArrayContains with missing actual array")
    function _()
      m.AssertArrayContains(invalid, "one")
    end function

    @it("fail AssertArrayContains when value is not in array")
    function _()
      m.AssertArrayContains(["one"], invalid)
    end function

    @it("fail AssertArrayContains when value is not in AA")
    function _()
      m.AssertArrayContains({ one: 1, two: 2, three: 3 }, invalid)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertArrayContainsAAs fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertArrayContainsAAs with missing actual array")
    function _()
      m.assertArrayContainsAAs(invalid, [{ "one": 1, "two": 2, "three": 3, "four": 4 }])
    end function

    @it("fail assertArrayContainsAAs with missing search array")
    function _()
      obj = {
        one: 1
        two: 2
        three: 3
      }
      m.assertArrayContainsAAs([obj], invalid)
    end function

    @it("fail assertArrayContainsAAs with invalid value in search array")
    function _()
      obj = {
        one: 1
        two: 2
        three: 3
      }
      m.assertArrayContainsAAs([obj], [invalid])
    end function

    @it("fail assertArrayContainsAAs did not contain aa")
    function _()
      obj = {
        one: 1
        two: 2
        three: 3
      }
      m.assertArrayContainsAAs([obj], [{ "one": 1, "two": 2, "three": 3, "four": 4 }])
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertArrayNotContains fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertArrayNotContains with missing actual array")
    function _()
      m.assertArrayNotContains(invalid, "one")
    end function

    @it("fail assertArrayNotContains when value is in array")
    function _()
      m.assertArrayNotContains(["one"], "one")
    end function

    @it("fail assertArrayNotContains when value is in AA")
    function _()
      m.assertArrayNotContains({ one: 1, two: 2, three: 3 }, { one: 1, two: 2, three: 3 })
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertArrayContainsSubset fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertArrayContainsSubset with missing actual array")
    function _()
      m.assertArrayContainsSubset(invalid, [])
    end function

    @it("fail assertArrayContainsSubset with missing actual subset")
    function _()
      m.assertArrayContainsSubset([], invalid)
    end function

    @it("fail assertArrayContainsSubset with actual as array and subset as AA")
    function _()
      m.assertArrayContainsSubset([], {})
    end function

    @it("fail assertArrayContainsSubset with actual as AA and subset as array")
    function _()
      m.assertArrayContainsSubset({}, [])
    end function

    @it("fail assertArrayContainsSubset with actual as array and subset not found")
    function _()
      m.assertArrayContainsSubset([ "one", "two", "three" ], [ "four" ])
    end function

    @it("fail assertArrayContainsSubset with actual as AA and subset not found")
    function _()
      m.assertArrayContainsSubset({ one: 1, two: 2, three: 3 }, { four: 3 })
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests assertArrayNotContainsSubset fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertArrayNotContainsSubset with missing actual array")
    function _()
      m.assertArrayNotContainsSubset(invalid, [])
    end function

    @it("fail assertArrayNotContainsSubset with missing actual subset")
    function _()
      m.assertArrayNotContainsSubset([], invalid)
    end function

    @it("fail assertArrayNotContainsSubset with actual as array and subset as AA")
    function _()
      m.assertArrayNotContainsSubset([], {})
    end function

    @it("fail assertArrayNotContainsSubset with actual as AA and subset as array")
    function _()
      m.assertArrayNotContainsSubset({}, [])
    end function

    @it("fail assertArrayNotContainsSubset with actual as array and subset found")
    function _()
      m.assertArrayNotContainsSubset([ "one", "two", "three" ], [ "three" ])
    end function

    @it("fail assertArrayNotContainsSubset with actual as AA and subset found")
    function _()
      m.assertArrayNotContainsSubset({ one: 1, two: 2, three: 3 }, { three: 3 })
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertArrayCount fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertArrayCount missing array")
    function _()
      m.assertArrayCount(invalid, 1)
    end function

    @it("fail assertArrayCount miss match count on array")
    function _()
      m.assertArrayCount([1, 2], 1)
    end function

    @it("fail assertArrayCount miss match count on AA")
    function _()
      m.assertArrayCount({ one: 1, two: 2 }, 1)
    end function

    @it("fail assertArrayCount bad count value")
    function _()
      m.assertArrayCount({ one: 1, two: 2 }, "1")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertArrayNotCount fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertArrayNotCount missing array")
    function _()
      m.assertArrayNotCount(invalid, 1)
    end function

    @it("fail assertArrayNotCount miss match count on array")
    function _()
      m.assertArrayNotCount([1, 2], 2)
    end function

    @it("fail assertArrayNotCount miss match count on AA")
    function _()
      m.assertArrayNotCount({ one: 1, two: 2 }, 2)
    end function

    @it("fail assertArrayNotCount bad count value")
    function _()
      m.assertArrayNotCount({ one: 1, two: 2 }, "2")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertEmpty fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertEmpty bad input")
    function _()
      m.assertEmpty(invalid)
    end function

    @it("fail assertEmpty non empty array")
    function _()
      m.assertEmpty([1])
    end function

    @it("fail assertEmpty non empty aa")
    function _()
      m.assertEmpty({ one: 1 })
    end function

    @it("fail assertEmpty non empty string")
    function _()
      m.assertEmpty("2")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertNotEmpty fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertNotEmpty bad input")
    function _()
      m.assertNotEmpty(invalid)
    end function

    @it("fail assertNotEmpty empty array")
    function _()
      m.assertNotEmpty([])
    end function

    @it("fail assertNotEmpty empty aa")
    function _()
      m.assertNotEmpty({})
    end function

    @it("fail assertNotEmpty empty string")
    function _()
      m.assertNotEmpty("")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests assertArrayContainsOnlyValuesOfType fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertArrayContainsOnlyValuesOfType bad input type")
    function _()
      m.assertArrayContainsOnlyValuesOfType(invalid, "bad value")
    end function

    @it("fail assertArrayContainsOnlyValuesOfType bad input value")
    function _()
      m.assertArrayContainsOnlyValuesOfType(invalid, "String")
    end function

    @it("fail assertArrayContainsOnlyValuesOfType array of invalid values")
    function _()
      m.assertArrayContainsOnlyValuesOfType([ invalid ], "String")
    end function

    @it("fail assertArrayContainsOnlyValuesOfType AA of invalid values")
    function _()
      m.assertArrayContainsOnlyValuesOfType({ key: invalid }, "String")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertType fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertType type mismatch")
    function _()
      m.assertType(invalid, "string")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertSubType fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertType type mismatch non-node")
    function _()
      m.assertSubType(createObject("roDateTime"), "MyNode")
    end function

    @it("fail assertType type mismatch primitive")
    function _()
      m.assertSubType(true, "MyNode")
    end function

    @it("fail assertType type mismatch subtypes")
    function _()
      m.assertSubType(createObject("roSgNode", "Node"), "MyNode")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests AssertClass fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fails if not passed a class")
    @params(invalid)
    @params([])
    @params("wrong")
    function _(value)
      m.assertClass(value, "myClass")
    end function

    @it("fails if wrong class name")
    @params({})
    @params({ __classname: invalid })
    @params({ __classname: "other" })
    function _(value)
      m.assertClass(value, "myClass")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests assertNodeCount fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertNodeCount missing node")
    function _()
      m.assertNodeCount(invalid, 0)
    end function

    @it("fail assertNodeCount on count miss match")
    function _()
      node = createObject("roSGNode", "Node")
      node.createChildren(10, "Group")
      m.assertNodeCount(node, 5)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests assertNodeEmpty fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertNodeEmpty missing node")
    function _()
      m.assertNodeEmpty(invalid)
    end function

    @it("fail assertNodeEmpty on non-empty node")
    function _()
      node = createObject("roSGNode", "Node")
      node.createChildren(10, "Group")
      m.assertNodeEmpty(node)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests assertNodeNotEmpty fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertNodeNotEmpty missing node")
    function _()
      m.assertNodeNotEmpty(invalid)
    end function

    @it("fail assertNodeNotEmpty on empty node")
    function _()
      node = createObject("roSGNode", "Node")
      m.assertNodeNotEmpty(node)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests assertNodeContains fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertNodeContains missing node")
    function _()
      m.assertNodeContains(invalid, invalid)
    end function

    @it("fail assertNodeContains when child not found")
    function _()
      node = createObject("roSGNode", "Node")
      node.createChildren(10, "Group")
      m.assertNodeContains(node, createObject("roSGNode", "Group"))
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests assertNodeContainsOnly fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertNodeContainsOnly missing node")
    function _()
      m.assertNodeContainsOnly(invalid, invalid)
    end function

    @it("fail assertNodeContainsOnly when child if found but contains other children")
    function _()
      node = createObject("roSGNode", "Node")
      node.createChildren(10, "Group")
      m.assertNodeContainsOnly(node, node.getChild(0))
    end function

    @it("fail assertNodeContainsOnly when child is not found")
    function _()
      node = createObject("roSGNode", "Node")
      node.createChildren(1, "Group")
      m.assertNodeContainsOnly(node, createObject("roSGNode", "Group"))
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests assertNodeNotContains fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertNodeNotContains missing node")
    function _()
      m.assertNodeNotContains(invalid, invalid)
    end function

    @it("fail assertNodeNotContains when child is found")
    function _()
      node = createObject("roSGNode", "Node")
      node.createChildren(10, "Group")
      m.assertNodeNotContains(node, node.getChild(5))
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests assertNodeContainsFields fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertNodeContainsFields missing node")
    function _()
      m.assertNodeContainsFields(invalid, invalid)
    end function

    @it("fail assertNodeContainsFields bad subset value")
    function _()
      node = createObject("roSGNode", "Node")
      m.assertNodeContainsFields(node, [])
    end function

    @it("fail assertNodeContainsFields fields are not found")
    function _()
      node = createObject("roSGNode", "Node")
      m.assertNodeContainsFields(node, { "field": "value", "id": "", "focusable": false, "": false })
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests assertNodeNotContainsFields fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertNodeNotContainsFields with missing node")
    function _()
      m.assertNodeNotContainsFields(invalid, [])
    end function

    @it("fail assertNodeNotContainsFields with missing subset")
    function _()
      node = createObject("roSGNode", "Node")
      m.assertNodeNotContainsFields(node, invalid)
    end function

    @it("fail assertNodeNotContainsFields legacy find child support in array subset")
    function _()
      node = createObject("roSGNode", "Node")
      node.createChildren(10, "Group")
      m.assertNodeNotContainsFields(node, [ node.getChild(5) ])
    end function

    @it("fail assertNodeNotContainsFields subset AA of fields")
    function _()
      node = createObject("roSGNode", "Node")
      m.assertNodeNotContainsFields(node, { "focusable": false })
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests assertAAContainsSubset fail")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("fail assertAAContainsSubset with missing actual AA")
    function _()
      m.assertAAContainsSubset(invalid, {})
    end function

    @it("fail assertAAContainsSubset with missing subset")
    function _()
      node = createObject("roSGNode", "Node")
      m.assertAAContainsSubset({ one: 1, two: 2, three: 3 }, invalid)
    end function

    @it("fail assertAAContainsSubset with subset item not found")
    function _()
      node = createObject("roSGNode", "Node")
      m.assertAAContainsSubset({ one: 1, two: 2, three: 3 }, { three: 4})
    end function

    'ASSERTIONS TO WRITE TESTS FOR!

    'This is coming soon!

    '    AssertEqual
    '    AssertLike
    '    AssertNotEqual
    '    AssertInvalid
    '    AssertNotInvalid
    '    AssertAAHasKey
    '    AssertAANotHasKey
    '    AssertAAHasKeys
    '    AssertAANotHasKeys
    '    AssertArrayNotContains
    '    AssertArrayContainsSubset
    '    AssertArrayNotContainsSubsetet
    '    AssertArrayCount
    '    AssertArrayNotCount
    '    AssertArrayContainsOnly
    '    AssertType
    '    AssertSubType
    '
    '    'Node extensions
    '    AssertNodeCount
    '    AssertNodeNotCount
    '    AssertNodeEmpty
    '    AssertNodeNotEmpty
    '    AssertNodeContains
    '    AssertNodeNotContains
    '    AssertNodeContainsFields
    '    AssertNodeNotContainsFields

    '    AssertArray
    '    AssertAAContainsSubset
    '
    '    'Mocking and stubbing
    '    AssertMocks
    '    MockFail
  end class
end namespace