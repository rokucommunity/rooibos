namespace rooibos
  class ConsoleTestReporter extends rooibos.BaseTestReporter

    private lineWidth = 60

    function new(runner)
      'bs:disable-next-line
      super(runner)
      if m.config.lineWidth <> invalid
        m.lineWidth = m.config.lineWidth
      else
        m.lineWidth = 60
      end if
    end function

    override function onEnd(ev as rooibos.ITestReporterOnEndEvent)
      m.allStats = ev.stats
      m.startReport()
      for each testSuite in m.testRunner.testSuites
        if not m.allStats.hasFailures or ((not m.config.showOnlyFailures) or testSuite.stats.failedCount > 0 or testSuite.stats.crashedCount > 0)
          m.printSuiteStart(testSuite)

          for each group in testSuite.groups
            m.printGroup(group)
          end for
        end if
      end for

      m.printLine()

      'bs:disable-next-line
      ignoredInfo = m.testRunner.runtimeConfig.getIgnoredTestInfo()
      m.printLine(0, "Total: " + rooibos.common.AsString(m.allStats.ranCount))
      m.printLine(0, "  Passed: " + rooibos.common.AsString(m.allStats.passedCount))
      m.printLine(0, "  Crashed: " + rooibos.common.AsString(m.allStats.crashedCount))
      m.printLine(0, "  Failed: " + rooibos.common.AsString(m.allStats.failedCount))
      'bs:disable-next-line
      m.printLine(0, "  Ignored: " + rooibos.common.AsString(ignoredInfo.count))
      m.printLine(0, "  Time: " + rooibos.common.AsString(m.allStats.time) + "ms")
      m.printLine()
      m.printLine()

      if ignoredInfo.count > 0
        m.printLine(0, "IGNORED TESTS:")
        for each ignoredItemName in ignoredInfo.items
          m.printLine(1, ignoredItemName)
        end for
        m.printLine()
        m.printLine()
      end if
      overrallResult = ""
      if m.allStats.hasFailures
        overrallResult = "Fail"
      else
        overrallResult = "Success"
      end if
      m.printLine(0, "RESULT: " + overrallResult)
      m.endReport()
    end function

    function printGroup(group as TestGroup)
      isGroupPrinted = false

      for each groupTest in group.tests
        if not m.allStats.hasFailures or ((not m.config.showOnlyFailures) or groupTest.result.isFail)
          if not isGroupPrinted
            m.printGroupStart(group)
            isGroupPrinted = true
          end if

          m.printTest(groupTest)
        end if
      end for

      if isGroupPrinted
        m.printLine(0, " |")
      end if
    end function

    function printTest(rooibosTest as Test)

      testLocationLine = StrI(rooibosTest.lineNumber).trim()

      locationLine = invalid
      testChar = ""
      if rooibosTest.result.isCrash
        testChar = "|"
        locationLine = StrI(rooibosTest.lineNumber).trim()
      else if rooibosTest.result.isFail
        testChar = "-"
        locationLine = StrI(rooibosTest.result.lineNumber + 1).trim()
      else
        testChar = "|"
        locationLine = StrI(rooibosTest.lineNumber).trim()
      end if

      testLocationText = "file://" + rooibosTest.testSuite.filePath.trim() + ":" + testLocationLine

      timeText = ""
      if m.config.printTestTimes = true
        timeText = " (" + stri(rooibosTest.result.time).trim() + "ms)"
      end if

      insetText = ""
      if rooibosTest.isParamTest <> true
        messageLine = rooibos.common.fillText(" " + testChar + " |--" + rooibosTest.name + " : ", ".", m.lineWidth)
        m.printLine(0, messageLine + rooibosTest.result.getStatusText() + timeText)
        m.printLine(0, " | " + insetText + "  |--Test : " + testLocationText)
      else if rooibosTest.paramTestIndex = 0
        name = rooibosTest.name
        if len(name) > 1 and right(name, 1) = "0"
          name = left(name, len(name) - 1)
        end if
        m.printLine(0, " " + testChar + " |--" + name + " : ")
        m.printLine(0, " | " + insetText + "  |--Test : " + testLocationText)
      end if

      locationText = "file://" + rooibosTest.testSuite.filePath.trim() + ":" + locationLine
      if rooibosTest.isParamTest = true
        insetText = "  "

        rawParams = invalid
        if type(rooibosTest.rawParams) = "roAssociativeArray"
          rawParams = {}
          for each key in rooibosTest.rawParams
            if type(rooibosTest.rawParams[key]) <> "Function" and type(rooibosTest.rawParams[key]) <> "roFunction"
              rawParams[key] = rooibosTest.rawParams[key]
            end if
          end for
        else
          rawParams = rooibosTest.rawParams
        end if
        messageLine = rooibos.common.fillText(" " + testChar + insetText + " |--" + formatJson(rawParams) + " : ", ".", m.lineWidth)
        m.printLine(0, messageLine + rooibosTest.result.getStatusText() + timeText)
      end if

      if rooibosTest.result.isCrash
        m.printLine(0, " | " + insetText + "  |--Crashed at: " + locationText)
        m.printStackTrace(insetText, rooibosTest.result.error)
        m.printLine(0, " | ")
      else if rooibosTest.result.isFail
        m.printLine(0, " | " + insetText + "  |--Failed at: " + locationText)
        if rooibosTest.isParamTest = true
          m.printLine(0, " | " + insetText + "  |--Param Line: " + StrI(rooibosTest.paramLineNumber - 1).trim())
        end if
        m.printLine(0, " | " + insetText + "  |--Error Message: " + rooibosTest.result.message)
        m.printLine(0, " | ")
      end if
    end function

    function printStackTrace(insetText, error)
      m.printLine(0, " | " + insetText + "  |")
      m.printLine(0, " | " + insetText + "  |--Message: " + error.message)
      m.printLine(0, " | " + insetText + "  |--Stack trace: ")

      for i = error.backTrace.count() - 1 to 0 step -1
        e = error.backTrace[i]
        if e.filename.instr("pkg:/source/rooibos") = -1
          m.printLine(0, " | " + insetText + "    " + e.filename + "(" + stri(e.line_number).trim() + ")")
        end if
      end for
    end function

    function startReport()
      m.printLine()
      m.printLine(0, "[START TEST REPORT]")
      m.printLine()
    end function

    function endReport()
      m.printLine()
      m.printLine(0, "[END TEST REPORT]")
      m.printLine()
    end function

    function printSuiteStart(testSuite)
      m.printLine(0, " " + testSuite.name + " file://" + testSuite.filePath.trim() + ":" + str(testSuite.lineNumber).trim())

    end function

    function printGroupStart(group)
      m.printLine(0, " |-" + group.name)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ printing
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function printLine(depth = 0, text = "")
      ? " " ; text
    end function

  end class
end namespace