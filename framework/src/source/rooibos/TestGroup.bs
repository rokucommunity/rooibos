namespace rooibos
  ' /**
  '  * @module TestSuite
  '  * @description All brs files that include `'@TestSuite` annotations automatically extend the TestSuite.
  '  * The base test suite contains all of the assertions, and utility methods required to write our tests, as well as being responsible for tracking the state of the tests and groups.
  '  */
  class TestGroup
    'test state
    name = "Unnamed Suite"

    testSuite = invalid
    setupFunctionName = invalid
    tearDownFunctionName = invalid
    beforeEachFunctionName = invalid
    afterEachFunctionName = invalid
    isSolo = false
    isLegacy = false
    isIgnored = false
    stats = invalid
    scene = invalid
    lineNumber = 00
    top = invalid
    valid = false
    hasFailures = false
    isNodeTest = false
    nodeName = invalid
    testsData = invalid
    tests = []

    function new(testSuite, data)
      m.testSuite = testSuite
      m.name = data.name
      m.valid = data.valid
      m.hasFailures = testSuite.hasFailures
      m.isSolo = data.isSolo
      m.isIgnored = data.isIgnored
      m.isAsync = data.isAsync
      m.asyncTimeout = data.asyncTimeout
      m.testsData = data.testCases
      m.isNodeTest = false
      m.nodeName = invalid
      m.setupFunctionName = data.setupFunctionName
      m.tearDownFunctionName = data.tearDownFunctionName
      m.beforeEachFunctionName = data.beforeEachFunctionName
      m.afterEachFunctionName = data.afterEachFunctionName
      m.lineNumber = data.lineNumber

      'bs:disable-next-line
      m.global = testSuite.global
      m.top = testSuite.top
      m.scene = testSuite.scene
      m.stats = new rooibos.Stats()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ running
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private currentTestIndex = 0
    'TODO CONVERT THIS TO ASYNC
    function run()
      ' ? ">>>>>>>>>>>>"
      ' ? " RUNNING TEST GROUP"
      m.testRunner = m.testSuite.testRunner
      m.testSuite.setTestTimer(0)
      if m.testSuite.isAsync = true
        ' ? " THIS GROUP IS ASYNC"
        m.runAsync()
      else
        ' ? " THIS GROUP IS SYNC"
        m.runSync()
      end if
    end function

    function runSync()
      isOk = m.runSuiteFunction(m.setupFunctionName, "setup")

      if isOk
        for each testData in m.testsData
          test = new rooibos.Test(m, testData)
          m.tests.push(test)

          isOk = m.runSuiteFunction(m.beforeEachFunctionName, "beforeEach", test)

          if isOk
            m.testSuite.runTest(test)
          end if

          m.runSuiteFunction(m.afterEachFunctionName, "afterEach", test)

          m.stats.appendTestResult(test.result)

          if m.stats.hasFailures and m.testSuite.isFailingFast
            ? "Terminating group due to failed test"
            exit for
          end if
        end for
      else
        ? "ERROR running test setup function"
      end if
      m.runSuiteFunction(m.tearDownFunctionName, "tearDown")
    end function


    function runAsync()
      isOk = m.runSuiteFunction(m.setupFunctionName, "setup")
      m.testTimer = createObject("roTimespan")

      if isOk
        m.testRunner.currentGroup = m
        for each testData in m.testsData
          test = new rooibos.Test(m, testData)
          m.tests.push(test)
        end for
        m.currentTestIndex = -1
        m.runNextAsync()
      else
        ? "ERROR running test setup function"
        m.runSuiteFunction(m.tearDownFunctionName, "tearDown")
      end if
    end function

    private function runNextAsync()
      ' ? "Getting next async test"
      m.currentTestIndex++
      m.currentTest = m.tests[m.currentTestIndex]
      m.testSuite.isDoneCalled = false
      m.testTimer.mark()
      if m.currentTest = invalid
        ' ? " all tests are finished"
        'finished
        m.finishAsyncTests()
      else
        m.testRunner.top.rooibosTestFinished = false
        isOk = m.runSuiteFunction(m.beforeEachFunctionName, "beforeEach", m.currentTest)
        if isOk
          'TODO - set a timeout here
          test = m.currentTest
          if test.isAsync <> true
            ? "Executing test synchronously"
            m.testSuite.runTest(test)
            m.testRunner.top.rooibosTestFinished = true
            m.onAsyncTestComplete()
          else
            m.testRunner.top.observeFieldScoped("rooibosTestFinished", "rooibos_onTestComplete")
            if test.isAsync = true
              m.testSuite.setTestTimer(test.asyncTimeout)
            end if
            m.testSuite.runTest(test)

            if test.result.isFail
              ? "Test failed before any async code could be executed"
              m.testRunner.top.unobserveFieldScoped("rooibosTestFinished")
              m.testRunner.top.rooibosTestFinished = true
              m.onAsyncTestComplete()
            end if
          end if

        else
          ? "Error running test before each function"
          m.isTestFailedDueToEarlyExit = true
          m.finishAsyncTests()
        end if
      end if
    end function

    private function onAsyncTestComplete()
      ' ? "++ CURRENT TEST COMPLETED"
      m.runSuiteFunction(m.afterEachFunctionName, "afterEach", m.currentTest)

      m.testRunner.top.unobserveFieldScoped("rooibosTestFinished")

      m.currentTest.result.time = m.testTimer.totalMilliseconds()
      m.stats.appendTestResult(m.currentTest.result)

      if m.stats.hasFailures and m.testSuite.isFailingFast
        ? "Terminating group due to failed test"
        m.isTestFailedDueToEarlyExit = true
        m.finishAsyncTests()
      else
        m.runNextAsync()
      end if

    end function

    private function finishAsyncTests()
      m.testRunner.top.unobserveFieldScoped("rooibosTestFinished")
      m.testSuite.setTestTimer(0)
      m.runSuiteFunction(m.tearDownFunctionName, "tearDown")
      ' ? " indicating test suite is done"
      ' m.testRunner.top.addFields({ asyncRooibosTestResult: {
      '     stats: m.stats
      '     tests: m.tests
      '   }
      ' })
      m.testSuite.testGroupDone()
    end function

    private function runSuiteFunction(methodName, defaultMethodName, test = invalid)

      if methodName = invalid or methodName = ""
        methodName = defaultMethodName
      end if
      if m.testSuite.catchCrashes and not m.testSuite.noCatch and not (test <> invalid and test.noCatch)
        try
          m.testSuite[methodName]()
          return true
        catch error
          if test <> invalid
            'bs:disable-next-line
            test.result.crash("function " + methodName + "crashed!", error)
          end if
        end try
      else
        m.testSuite[methodName]()
        return true
      end if

      'bs:disable-next-line
      return false
    end function

  end class

  function onTestComplete()
    ' ? "++++++++ THE TEST COMPLETED"
    m.testRunner.currentGroup.onAsyncTestComplete()
  end function
end namespace