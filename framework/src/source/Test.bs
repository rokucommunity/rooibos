namespace rooibos
  class Test

    public name
    public isSolo
    public noCatch = false
    public funcName
    public isIgnored
    public lineNumber
    public paramLineNumber
    public testSuite = invalid
    public testGroup = invalid

    public rawParams
    public paramTestIndex
    public isParamTest = false
    public isParamsValid = false
    public expectedNumberOfParams = 0

    public result = invalid

    function new(testGroup, data)
      m.testGroup = testGroup
      m.testSuite = testGroup.testSuite
      m.isSolo = data.isSolo
      m.noCatch = data.noCatch
      m.funcName = data.funcName
      m.isIgnored = data.isIgnored
      m.isAsync = data.isAsync
      m.asyncTimeout = data.asyncTimeout
      m.name = data.name
      m.lineNumber = data.lineNumber
      m.paramLineNumber = data.paramLineNumber
      m.rawParams = data.rawParams
      m.paramTestIndex = data.paramTestIndex
      m.isParamTest = data.isParamTest
      m.expectedNumberOfParams = data.expectedNumberOfParams

      if m.isParamTest
        m.name = m.name + stri(m.paramTestIndex)
      end if

      m.result = new rooibos.TestResult(m)
    end function

    function run()
      rooibosTimer = createObject("roTimespan")
      rooibosTimer.mark()

      if m.isParamTest
        m.runParamsTest()
      else
        m.testSuite[m.funcName]()
      end if

      m.result.time = rooibosTimer.totalMilliseconds()

    end function

    function runParamsTest()
      testParams = m.getTestParams()

      if m.expectedNumberOfParams = 1
        m.testSuite[m.funcName](testParams[0])
      else if m.expectedNumberOfParams = 2
        m.testSuite[m.funcName](testParams[0], testParams[1])
      else if m.expectedNumberOfParams = 3
        m.testSuite[m.funcName](testParams[0], testParams[1], testParams[2])
      else if m.expectedNumberOfParams = 4
        m.testSuite[m.funcName](testParams[0], testParams[1], testParams[2], testParams[3])
      else if m.expectedNumberOfParams = 5
        m.testSuite[m.funcName](testParams[0], testParams[1], testParams[2], testParams[3], testParams[4])
      else if m.expectedNumberOfParams = 6
        m.testSuite[m.funcName](testParams[0], testParams[1], testParams[2], testParams[3], testParams[4], testParams[5])
      else if m.expectedNumberOfParams = 7
        m.testSuite[m.funcName](testParams[0], testParams[1], testParams[2], testParams[3], testParams[4], testParams[5], testParams[6])
      else if m.expectedNumberOfParams = 8
        m.testSuite[m.funcName](testParams[0], testParams[1], testParams[2], testParams[3], testParams[4], testParams[5], testParams[6], testParams[7])
      else if m.expectedNumberOfParams = 9
        m.testSuite[m.funcName](testParams[0], testParams[1], testParams[2], testParams[3], testParams[4], testParams[5], testParams[6], testParams[7], testParams[8])
      else if m.expectedNumberOfParams = 10
        m.testSuite[m.funcName](testParams[0], testParams[1], testParams[2], testParams[3], testParams[4], testParams[5], testParams[6], testParams[7], testParams[8], testParams[9])
      else if m.expectedNumberOfParams = 11
        m.testSuite[m.funcName](testParams[0], testParams[1], testParams[2], testParams[3], testParams[4], testParams[5], testParams[6], testParams[7], testParams[8], testParams[9], testParams[10])
      else if m.expectedNumberOfParams = 12
        m.testSuite[m.funcName](testParams[0], testParams[1], testParams[2], testParams[3], testParams[4], testParams[5], testParams[6], testParams[7], testParams[8], testParams[9], testParams[10], testParams[11])
      else if m.expectedNumberOfParams > 12
        m.testSuite.fail("Test case had more than 12 params. Max of 12 params is supported")
      end if
    end function

    function getTestParams()
      params = []
      for paramIndex = 0 to m.rawParams.count()
        paramValue = m.rawParams[paramIndex]
        if type(paramValue) = "roString" and len(paramValue) >= 8 and left(paramValue, 8) = "#RBSNode"
          nodeType = "ContentNode"
          paramDirectiveArgs = paramValue.split("|")
          if paramDirectiveArgs.count() > 1
            nodeType = paramDirectiveArgs[1]
          end if
          paramValue = createObject("roSGNode", nodeType)
        end if
        params.push(paramValue)
      end for
      return params
    end function

  end class
end namespace